# development profile
jwt:
  header: Authorization
  secret: aaaabbbsdifqbvaesoioegwaaaabbbsdifqbvaesoioegwaaaabbbsdifqbvaes

spring:
  main:
    # 처음에 나오는 Spring Logo 제거
    banner-mode: off
  mvc:
    # 어떤 경로에 대한 요청의 응답으로 정적 파일을 응답으로 할지
    static-path-pattern: /static/**
  web:
    resources:
      static-locations: file:/media/, classpath:/static
  datasource:
    # driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/market
    username: seonik
    password:
  jpa:
    hibernate:
      # 테이블 생성 시 create
      ddl-auto: create
    properties:
      show-sql: true
      format_sql: true # 보기좋게 줄바꿈
      highlight_sql: true # 하이라이트
      use_sql_comments: true # 보다 쉬운 디버깅을 위해 SQL 내부에 /**/ 주석 추가
    # 로그 레벨은 추후에 설정
    # logging

    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    # table create 후 data.sql 로 초기화할 때 사용
    # defer-datasource-initialization: true
  sql:
    init:
      mode: always
  data:
    redis:
      host: localhost
      port: 6379
  security:
    oauth2:
      client:
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
        registration:
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: ${NAVER_REDIRECT_URI}
            scope:
              - email
            client-name: Naver


springdoc:
  swagger-ui:
    display-request-duration: true
  api-docs:
    path: /v1/api-docs

  paths-to-match:
    - /api/v1/**